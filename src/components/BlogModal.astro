---
interface Props {
  id: string;
  title: string;
  content: string;
}

const { id, title, content } = Astro.props;
---

<div id={id} class="fixed inset-0 z-50 hidden items-center justify-center bg-black/70 backdrop-blur-md transition-all duration-300 p-4 overflow-hidden">
  <div class="bg-white max-w-4xl w-full mx-auto rounded-2xl shadow-2xl transform scale-95 opacity-0 transition-all duration-300 border-t-4 border-indigo-500 relative overflow-hidden">
    <!-- Close button that stands out better -->
    <button class="absolute top-3 right-3 z-20 bg-indigo-600 hover:bg-indigo-700 text-white p-2.5 rounded-full shadow-lg transition-all duration-200 transform hover:rotate-90 flex items-center justify-center" data-close-modal>
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x">
        <path d="M18 6 6 18" />
        <path d="m6 6 12 12" />
      </svg>
    </button>
    
    <!-- Content container with scroll -->
    <div class="max-h-[85vh] overflow-y-auto overflow-x-hidden">
      <!-- Header area with gradient background -->
      <div class="relative bg-gradient-to-r from-indigo-50 to-white px-6 md:px-10 pt-8 pb-6">
        <div class="absolute left-0 top-0 bottom-0 w-1.5 bg-gradient-to-b from-indigo-500 to-purple-600"></div>
        <h2 class="text-3xl md:text-4xl font-bold text-gray-800 leading-tight pl-4 md:pl-5">{title}</h2>
        <div class="w-24 md:w-32 h-1 bg-gradient-to-r from-indigo-500 to-purple-600 mt-3 rounded-full ml-4 md:ml-5"></div>
      </div>
      
      <!-- Blog content area -->
      <div class="px-6 md:px-10 py-8 blog-content prose prose-lg max-w-none space-y-4">
        <!-- The content will be typed here dynamically -->
        <div class="typing-cursor inline-block w-0.5 h-6 bg-indigo-600 ml-1"></div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
// Add window properties globally with plain JS
(() => {
  if (typeof window !== 'undefined') {
    if (!window.modalData) {
      window.modalData = {};
    }
  
    if (!window.openBlogModal) {
      window.openBlogModal = function(modalId) {
        const modalToOpen = document.getElementById(modalId);
        if (!modalToOpen) return;
        
        // Show the modal with fade-in effect
        modalToOpen.classList.remove('hidden');
        modalToOpen.classList.add('flex');
        document.body.style.overflow = 'hidden';
        
        // Add entrance animation to backdrop
        if (modalToOpen.animate) {
          modalToOpen.animate([
            { opacity: 0 },
            { opacity: 1 }
          ], {
            duration: 300,
            easing: 'ease-out'
          });
        }
        
        // Animate modal in
        const contentElement = modalToOpen.querySelector('.blog-content');
        if (!contentElement) return;
        
        const modalContentElem = contentElement.parentElement?.parentElement;
        if (!modalContentElem) return;
        
        setTimeout(() => {
          modalContentElem.classList.remove('scale-95', 'opacity-0');
          modalContentElem.classList.add('scale-100', 'opacity-100');
        }, 10);
        
        // Start the typing animation
        const blogContentEl = modalToOpen.querySelector('.blog-content');
        if (!blogContentEl) return;
        
        const modalContent = window.modalData[modalId] || '';
        resetAndStartTyping(blogContentEl, { content: modalContent });
      };
    }
  
    // Helper functions
    window.closeModal = function(modal, modalContent) {
      if (!modal || !modalContent) return;
      
      // Apply closing animation
      modalContent.classList.remove('scale-100', 'opacity-100');
      modalContent.classList.add('scale-95', 'opacity-0');
      
      // Add a fade-out effect to the backdrop
      modal.style.backgroundColor = 'rgba(0, 0, 0, 0)';
      modal.style.backdropFilter = 'blur(0px)';
      
      setTimeout(() => {
        modal.classList.remove('flex');
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
        // Reset backdrop for next opening
        modal.style.backgroundColor = '';
        modal.style.backdropFilter = '';
      }, 300);
    }
  
    window.resetAndStartTyping = function(blogContent, { content }) {
      if (!blogContent) return;
      
      blogContent.innerHTML = '';
      // Re-add typing cursor
      const cursor = document.createElement('div');
      cursor.classList.add('typing-cursor', 'inline-block', 'w-0.5', 'h-6', 'bg-indigo-600', 'ml-1');
      blogContent.appendChild(cursor);
      window.typeContent(blogContent, content || '');
    }
  
    window.typeContent = function(blogContent, content) {
      if (!blogContent || !content) return;
      
      const paragraphs = content.split('\n\n');
      let paragraphIndex = 0;
      let charIndex = 0;
      let currentOutput = '';
      let currentParagraph = null;
      
      // Create elements for the first paragraph
      if (paragraphs.length > 0) {
        // Check if it's a header (has no space or matches header pattern)
        if (!paragraphs[0].includes(' ') || /^[A-Z][a-z]+( [A-Z][a-z]+)*$/.test(paragraphs[0])) {
          currentParagraph = document.createElement('h3');
          currentParagraph.classList.add('font-bold', 'text-xl', 'md:text-2xl', 'mt-6', 'mb-3', 'text-indigo-700');
        } else {
          currentParagraph = document.createElement('p');
          currentParagraph.classList.add('mb-4', 'leading-relaxed', 'text-gray-700');
        }
        
        blogContent.appendChild(currentParagraph);
      
        const typingCursor = blogContent.querySelector('.typing-cursor');
        if (typingCursor) blogContent.appendChild(typingCursor);
      
        const typingInterval = setInterval(() => {
          if (paragraphIndex >= paragraphs.length) {
            clearInterval(typingInterval);
            const cursor = blogContent.querySelector('.typing-cursor');
            if (cursor) cursor.remove();
            return;
          }
          
          if (charIndex < paragraphs[paragraphIndex].length) {
            currentOutput += paragraphs[paragraphIndex][charIndex];
            if (currentParagraph) {
              currentParagraph.textContent = currentOutput;
            }
            charIndex++;
          } else {
            // Move to next paragraph
            paragraphIndex++;
            charIndex = 0;
            currentOutput = '';
            
            if (paragraphIndex < paragraphs.length) {
              // Check if it seems like a header
              if (!paragraphs[paragraphIndex].includes(' ') || 
                  /^[A-Z][a-z]+( [A-Z][a-z]+)*$/.test(paragraphs[paragraphIndex])) {
                currentParagraph = document.createElement('h3');
                currentParagraph.classList.add('font-bold', 'text-xl', 'md:text-2xl', 'mt-6', 'mb-3', 'text-indigo-700');
              } else {
                currentParagraph = document.createElement('p');
                currentParagraph.classList.add('mb-4', 'leading-relaxed', 'text-gray-700');
              }
              
              // Add entrance animation class
              currentParagraph.classList.add('animate-entry');
              blogContent.appendChild(currentParagraph);
            }
          }
        }, 2); // Fast typing speed for better user experience
      }
    }
  }
})();
</script>

<script define:vars={{ id, content }} is:inline>
// Store the content in the global modalData object
document.addEventListener('DOMContentLoaded', () => {
  // Ensure the modalData object exists
  if (!window.modalData) window.modalData = {};
  window.modalData[id] = content || ''; // Added fallback for content
  
  const modal = document.getElementById(id);
  if (!modal) return;
  
  const closeBtn = modal.querySelector('[data-close-modal]');
  const contentEl = modal.querySelector('.blog-content');
  if (!contentEl || !closeBtn) return;
  
  const modalContent = contentEl.parentElement?.parentElement;
  if (!modalContent) return;
  
  // Close modal when clicking the close button
  closeBtn.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    window.closeModal(modal, modalContent);
  });
  
  // Close modal when clicking outside the content
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      window.closeModal(modal, modalContent);
    }
  });

  // Close modal with ESC key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal.classList.contains('flex')) {
      window.closeModal(modal, modalContent);
    }
  });
});
</script>

<style is:global>
  /* Modern animations for the blog modal */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes slideUp {
    from { transform: translateY(15px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }
  
  .blog-content p {
    opacity: 0;
    animation: slideUp 0.4s ease-out forwards;
    animation-delay: 0.05s;
  }
  
  .blog-content h3 {
    opacity: 0;
    animation: fadeIn 0.5s ease-out forwards;
    position: relative;
    padding-left: 16px;
    color: #4338ca;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }
  
  .blog-content h3::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
    background: linear-gradient(to bottom, #6366F1, #8B5CF6);
    border-radius: 2px;
  }
  
  /* Elegant blinking cursor */
  .typing-cursor {
    animation: blink 0.8s infinite;
  }
  
  @keyframes blink {
    0% { opacity: 1; }
    50% { opacity: 0; }
    100% { opacity: 1; }
  }
  
  .animate-entry {
    opacity: 0;
    transform: translateY(10px);
    animation: slideUp 0.3s ease-out forwards;
  }
  
  /* Additional styling for blog content */
  .blog-content {
    color: #374151;
    line-height: 1.8;
    font-size: 1.05rem;
  }
  
  /* Mobile responsive adjustments */
  @media (max-width: 640px) {
    .blog-content {
      font-size: 1rem;
      line-height: 1.7;
    }
    
    .blog-content h3 {
      font-size: 1.25rem;
      padding-left: 12px;
    }
  }
</style>